// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: grpc/goph_keeper/v1/goph_keeper.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GophKeeperV1Service_RegisterUser_FullMethodName     = "/grpc.goph_keeper.v1.GophKeeperV1Service/RegisterUser"
	GophKeeperV1Service_AuthenticateUser_FullMethodName = "/grpc.goph_keeper.v1.GophKeeperV1Service/AuthenticateUser"
	GophKeeperV1Service_Verify2FA_FullMethodName        = "/grpc.goph_keeper.v1.GophKeeperV1Service/Verify2FA"
	GophKeeperV1Service_UploadData_FullMethodName       = "/grpc.goph_keeper.v1.GophKeeperV1Service/UploadData"
	GophKeeperV1Service_GetStoreDataList_FullMethodName = "/grpc.goph_keeper.v1.GophKeeperV1Service/GetStoreDataList"
	GophKeeperV1Service_DownloadData_FullMethodName     = "/grpc.goph_keeper.v1.GophKeeperV1Service/DownloadData"
)

// GophKeeperV1ServiceClient is the client API for GophKeeperV1Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GophKeeperV1ServiceClient interface {
	// User registration
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error)
	// User authentication
	AuthenticateUser(ctx context.Context, in *AuthenticateUserRequest, opts ...grpc.CallOption) (*AuthenticateUserResponse, error)
	// Verifying 2FA
	Verify2FA(ctx context.Context, in *Verify2FARequest, opts ...grpc.CallOption) (*Verify2FAResponse, error)
	// Storing private data (streaming)
	UploadData(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadDataRequest, UploadDataResponse], error)
	// Listing private data
	GetStoreDataList(ctx context.Context, in *GetStoreDataListRequest, opts ...grpc.CallOption) (*GetStoreDataListResponse, error)
	// Requesting private data (streaming)
	DownloadData(ctx context.Context, in *DownloadDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadDataResponse], error)
}

type gophKeeperV1ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGophKeeperV1ServiceClient(cc grpc.ClientConnInterface) GophKeeperV1ServiceClient {
	return &gophKeeperV1ServiceClient{cc}
}

func (c *gophKeeperV1ServiceClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*RegisterUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterUserResponse)
	err := c.cc.Invoke(ctx, GophKeeperV1Service_RegisterUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperV1ServiceClient) AuthenticateUser(ctx context.Context, in *AuthenticateUserRequest, opts ...grpc.CallOption) (*AuthenticateUserResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthenticateUserResponse)
	err := c.cc.Invoke(ctx, GophKeeperV1Service_AuthenticateUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperV1ServiceClient) Verify2FA(ctx context.Context, in *Verify2FARequest, opts ...grpc.CallOption) (*Verify2FAResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Verify2FAResponse)
	err := c.cc.Invoke(ctx, GophKeeperV1Service_Verify2FA_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperV1ServiceClient) UploadData(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[UploadDataRequest, UploadDataResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GophKeeperV1Service_ServiceDesc.Streams[0], GophKeeperV1Service_UploadData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[UploadDataRequest, UploadDataResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GophKeeperV1Service_UploadDataClient = grpc.ClientStreamingClient[UploadDataRequest, UploadDataResponse]

func (c *gophKeeperV1ServiceClient) GetStoreDataList(ctx context.Context, in *GetStoreDataListRequest, opts ...grpc.CallOption) (*GetStoreDataListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStoreDataListResponse)
	err := c.cc.Invoke(ctx, GophKeeperV1Service_GetStoreDataList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophKeeperV1ServiceClient) DownloadData(ctx context.Context, in *DownloadDataRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[DownloadDataResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &GophKeeperV1Service_ServiceDesc.Streams[1], GophKeeperV1Service_DownloadData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[DownloadDataRequest, DownloadDataResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GophKeeperV1Service_DownloadDataClient = grpc.ServerStreamingClient[DownloadDataResponse]

// GophKeeperV1ServiceServer is the server API for GophKeeperV1Service service.
// All implementations must embed UnimplementedGophKeeperV1ServiceServer
// for forward compatibility.
type GophKeeperV1ServiceServer interface {
	// User registration
	RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error)
	// User authentication
	AuthenticateUser(context.Context, *AuthenticateUserRequest) (*AuthenticateUserResponse, error)
	// Verifying 2FA
	Verify2FA(context.Context, *Verify2FARequest) (*Verify2FAResponse, error)
	// Storing private data (streaming)
	UploadData(grpc.ClientStreamingServer[UploadDataRequest, UploadDataResponse]) error
	// Listing private data
	GetStoreDataList(context.Context, *GetStoreDataListRequest) (*GetStoreDataListResponse, error)
	// Requesting private data (streaming)
	DownloadData(*DownloadDataRequest, grpc.ServerStreamingServer[DownloadDataResponse]) error
	mustEmbedUnimplementedGophKeeperV1ServiceServer()
}

// UnimplementedGophKeeperV1ServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGophKeeperV1ServiceServer struct{}

func (UnimplementedGophKeeperV1ServiceServer) RegisterUser(context.Context, *RegisterUserRequest) (*RegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedGophKeeperV1ServiceServer) AuthenticateUser(context.Context, *AuthenticateUserRequest) (*AuthenticateUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthenticateUser not implemented")
}
func (UnimplementedGophKeeperV1ServiceServer) Verify2FA(context.Context, *Verify2FARequest) (*Verify2FAResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify2FA not implemented")
}
func (UnimplementedGophKeeperV1ServiceServer) UploadData(grpc.ClientStreamingServer[UploadDataRequest, UploadDataResponse]) error {
	return status.Errorf(codes.Unimplemented, "method UploadData not implemented")
}
func (UnimplementedGophKeeperV1ServiceServer) GetStoreDataList(context.Context, *GetStoreDataListRequest) (*GetStoreDataListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStoreDataList not implemented")
}
func (UnimplementedGophKeeperV1ServiceServer) DownloadData(*DownloadDataRequest, grpc.ServerStreamingServer[DownloadDataResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DownloadData not implemented")
}
func (UnimplementedGophKeeperV1ServiceServer) mustEmbedUnimplementedGophKeeperV1ServiceServer() {}
func (UnimplementedGophKeeperV1ServiceServer) testEmbeddedByValue()                             {}

// UnsafeGophKeeperV1ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GophKeeperV1ServiceServer will
// result in compilation errors.
type UnsafeGophKeeperV1ServiceServer interface {
	mustEmbedUnimplementedGophKeeperV1ServiceServer()
}

func RegisterGophKeeperV1ServiceServer(s grpc.ServiceRegistrar, srv GophKeeperV1ServiceServer) {
	// If the following call pancis, it indicates UnimplementedGophKeeperV1ServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GophKeeperV1Service_ServiceDesc, srv)
}

func _GophKeeperV1Service_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperV1ServiceServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeperV1Service_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperV1ServiceServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeperV1Service_AuthenticateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthenticateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperV1ServiceServer).AuthenticateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeperV1Service_AuthenticateUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperV1ServiceServer).AuthenticateUser(ctx, req.(*AuthenticateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeperV1Service_Verify2FA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Verify2FARequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperV1ServiceServer).Verify2FA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeperV1Service_Verify2FA_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperV1ServiceServer).Verify2FA(ctx, req.(*Verify2FARequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeperV1Service_UploadData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GophKeeperV1ServiceServer).UploadData(&grpc.GenericServerStream[UploadDataRequest, UploadDataResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GophKeeperV1Service_UploadDataServer = grpc.ClientStreamingServer[UploadDataRequest, UploadDataResponse]

func _GophKeeperV1Service_GetStoreDataList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStoreDataListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophKeeperV1ServiceServer).GetStoreDataList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GophKeeperV1Service_GetStoreDataList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophKeeperV1ServiceServer).GetStoreDataList(ctx, req.(*GetStoreDataListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GophKeeperV1Service_DownloadData_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadDataRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GophKeeperV1ServiceServer).DownloadData(m, &grpc.GenericServerStream[DownloadDataRequest, DownloadDataResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type GophKeeperV1Service_DownloadDataServer = grpc.ServerStreamingServer[DownloadDataResponse]

// GophKeeperV1Service_ServiceDesc is the grpc.ServiceDesc for GophKeeperV1Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GophKeeperV1Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.goph_keeper.v1.GophKeeperV1Service",
	HandlerType: (*GophKeeperV1ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _GophKeeperV1Service_RegisterUser_Handler,
		},
		{
			MethodName: "AuthenticateUser",
			Handler:    _GophKeeperV1Service_AuthenticateUser_Handler,
		},
		{
			MethodName: "Verify2FA",
			Handler:    _GophKeeperV1Service_Verify2FA_Handler,
		},
		{
			MethodName: "GetStoreDataList",
			Handler:    _GophKeeperV1Service_GetStoreDataList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadData",
			Handler:       _GophKeeperV1Service_UploadData_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadData",
			Handler:       _GophKeeperV1Service_DownloadData_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "grpc/goph_keeper/v1/goph_keeper.proto",
}
